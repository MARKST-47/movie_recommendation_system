# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1No2q-wDqjSjLrz74Hrfvh_gCtIJDuJOW
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv('/content/movies.csv')

df.head()

df.shape

df.isnull().sum()

selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
df[selected_features]

# Replacing Null values with Null string
for feature in selected_features:
  df[feature] = df[feature].fillna('')

df[selected_features].isnull().sum()

# Combining all 5 selected features
combined_features = df['genres'] + " " + df['keywords'] + " " + df['tagline'] + " " + df['cast'] + " " + df['director']

print(combined_features)

# Converting the text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

# Getting the similarity score using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity)

similarity.shape

# Getting the movie name from the user
movie_name = input("Enter your favorite movie name: ")

# Creating a list with all movie names given in the dataset
list_of_all_titles = df['title'].tolist()
print(list_of_all_titles)

# Finding the closest match to the movie name
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# Finding the index of the movie with Title
index_of_the_movie = df[df['title'] == close_match]['index'].values[0]
print(index_of_the_movie)

# Each movie index and similarity score to selected movie_name
similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

# Sorting the movies based on their similarity score.
sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)
print(sorted_similar_movies)

# Print names of similar movies based on index
print("Movies suggested for you: \n")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index == index]['title'].values[0]
  if i < 30:
    print(f"{i}. {title_from_index}")
    i += 1

"""## **Movie Recommendation System**"""

movie_name = input("Enter your favorite movie: ")

list_of_all_titles = df['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

closest_match = find_close_match[0]

index_of_the_movie = df[df['title'] == closest_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)

df_subset = df[['index', 'title', 'genres', 'homepage']]

print("\nMovies suggested for you: \n")
i = 1

# Create an empty list to store recommended movie data
recommended_movies_data = []

for movie in sorted_similar_movies:
    index = movie[0]
    movie_data = df_subset[df_subset['index'] == index].iloc[0]

    title = movie_data['title']
    genres = movie_data['genres']
    homepage = movie_data['homepage']

    if i < 30:
        recommended_movies_data.append({'Rank': i, 'Title': title, 'Genres': genres, 'Homepage': homepage})
        print(f"{i}. {title} (Genres: {genres}, Homepage: {homepage})")
        i += 1

# Create a DataFrame from the list of recommended movie data
recommended_movies_df = pd.DataFrame(recommended_movies_data)
recommended_movies_df.set_index('Rank', inplace=True)

# Display the DataFrame
print("\nRecommended Movies Table:")
recommended_movies_df

